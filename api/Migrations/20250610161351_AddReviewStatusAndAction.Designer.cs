// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using api.Data;

#nullable disable

namespace api.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250610161351_AddReviewStatusAndAction")]
    partial class AddReviewStatusAndAction
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("author")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)");

                    b.Property<string>("cover_image_url")
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("description")
                        .HasColumnType("text");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)");

                    b.Property<decimal>("price")
                        .HasPrecision(10, 2)
                        .HasColumnType("numeric(10,2)");

                    b.Property<string>("title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("id")
                        .HasName("products_pkey");

                    b.HasIndex(new[] { "name" }, "product_name_key")
                        .IsUnique();

                    b.ToTable("Products");
                });

            modelBuilder.Entity("api.Models.Review", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("author_name")
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)");

                    b.Property<string>("author_surname")
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)");

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.PrimitiveCollection<List<string>>("images")
                        .HasColumnType("text[]");

                    b.Property<DateTime?>("moderated_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("moderated_by")
                        .HasColumnType("integer");

                    b.Property<int>("product_id")
                        .HasColumnType("integer");

                    b.Property<int>("rating")
                        .HasColumnType("integer");

                    b.Property<string>("status")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("review_status")
                        .HasDefaultValue("PENDING")
                        .HasColumnName("status");

                    b.Property<DateTime?>("updated_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("user_id")
                        .HasColumnType("integer");

                    b.HasKey("id")
                        .HasName("reviews_pkey");

                    b.HasIndex("moderated_by");

                    b.HasIndex("product_id");

                    b.HasIndex("user_id");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("api.Models.Review_log", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("action")
                        .IsRequired()
                        .HasColumnType("moderation_action")
                        .HasColumnName("action");

                    b.Property<string>("comment")
                        .HasColumnType("text");

                    b.Property<int>("performed_by")
                        .HasColumnType("integer");

                    b.Property<int>("review_id")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("timestamp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.HasKey("id")
                        .HasName("review_logs_pkey");

                    b.HasIndex("performed_by");

                    b.HasIndex("review_id");

                    b.ToTable("Review_logs");
                });

            modelBuilder.Entity("api.Models.Review_version", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<string>("content")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("edited_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<int?>("edited_by")
                        .HasColumnType("integer");

                    b.Property<int>("review_id")
                        .HasColumnType("integer");

                    b.HasKey("id")
                        .HasName("review_versions_pkey");

                    b.HasIndex("edited_by");

                    b.HasIndex("review_id");

                    b.ToTable("Review_versions");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("id"));

                    b.Property<DateTime>("created_at")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("CURRENT_TIMESTAMP");

                    b.Property<string>("email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime?>("last_login_at")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("password_hash")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasDefaultValueSql("'USER'::character varying");

                    b.Property<string>("username")
                        .IsRequired()
                        .HasMaxLength(35)
                        .HasColumnType("character varying(35)");

                    b.HasKey("id")
                        .HasName("users_pkey");

                    b.HasIndex(new[] { "email" }, "users_email_key")
                        .IsUnique();

                    b.HasIndex(new[] { "username" }, "users_username_key")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("api.Models.Review", b =>
                {
                    b.HasOne("api.Models.User", "moderated_byNavigation")
                        .WithMany("reviewmoderated_byNavigations")
                        .HasForeignKey("moderated_by")
                        .HasConstraintName("reviews_moderated_by_fkey");

                    b.HasOne("api.Models.Product", "product")
                        .WithMany("reviews")
                        .HasForeignKey("product_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("reviews_product_id_fkey");

                    b.HasOne("api.Models.User", "user")
                        .WithMany("reviewusers")
                        .HasForeignKey("user_id")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("reviews_user_id_fkey");

                    b.Navigation("moderated_byNavigation");

                    b.Navigation("product");

                    b.Navigation("user");
                });

            modelBuilder.Entity("api.Models.Review_log", b =>
                {
                    b.HasOne("api.Models.User", "performed_byNavigation")
                        .WithMany("review_logs")
                        .HasForeignKey("performed_by")
                        .IsRequired()
                        .HasConstraintName("review_logs_performed_by_fkey");

                    b.HasOne("api.Models.Review", "review")
                        .WithMany("review_logs")
                        .HasForeignKey("review_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("review_logs_review_id_fkey");

                    b.Navigation("performed_byNavigation");

                    b.Navigation("review");
                });

            modelBuilder.Entity("api.Models.Review_version", b =>
                {
                    b.HasOne("api.Models.User", "edited_byNavigation")
                        .WithMany("review_versions")
                        .HasForeignKey("edited_by")
                        .HasConstraintName("review_versions_edited_by_fkey");

                    b.HasOne("api.Models.Review", "review")
                        .WithMany("review_versions")
                        .HasForeignKey("review_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("review_versions_review_id_fkey");

                    b.Navigation("edited_byNavigation");

                    b.Navigation("review");
                });

            modelBuilder.Entity("api.Models.Product", b =>
                {
                    b.Navigation("reviews");
                });

            modelBuilder.Entity("api.Models.Review", b =>
                {
                    b.Navigation("review_logs");

                    b.Navigation("review_versions");
                });

            modelBuilder.Entity("api.Models.User", b =>
                {
                    b.Navigation("review_logs");

                    b.Navigation("review_versions");

                    b.Navigation("reviewmoderated_byNavigations");

                    b.Navigation("reviewusers");
                });
#pragma warning restore 612, 618
        }
    }
}
